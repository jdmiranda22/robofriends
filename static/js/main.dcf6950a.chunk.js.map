{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,GAC3B,OACG,sBAAKC,UAAU,sDAAf,UACM,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACxB,gCACG,6BAAKF,IACL,4BAAIC,WCeDK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEjB,OACG,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACb,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCILC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAChC,OACG,qBAAKV,UAAU,MAAf,SACG,uBACGA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCPI,EARA,SAACC,GACb,OACG,qBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACIJ,EAAMK,YCiBDC,E,kDAnBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,mDAEDG,KAAKX,MAAMK,a,GAhBOQ,aC8CZC,G,wDAxCZ,aAAe,IAAD,8BACX,gBAaHC,eAAiB,SAACC,GACf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACVlB,OAAQ,GACR4B,YAAa,IAJL,E,gEAQO,IAAD,OACjBG,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAOnC,IAAD,EAC0Bb,KAAKJ,MAA7BlB,EADF,EACEA,OAAQ4B,EADV,EACUA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GAClC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEvD,OAAQvC,EAAOyC,OAGb,sBAAK7C,UAAU,KAAf,UACG,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACG,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,OAAQoC,WAPxB,6C,GAzBSZ,cCKHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.dcf6950a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email , id }) => {\r\n   return (\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n         <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n   \r\n   return (\r\n      <div>\r\n         {\r\n          robots.map((user, i) => {\r\n               return (\r\n               <Card\r\n               key={i}\r\n               id={robots[i].id}\r\n               name={robots[i].name}\r\n               email={robots[i].email}\r\n            />\r\n            );\r\n          })\r\n         }            \r\n      </div>\r\n   )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField,  searchChange}) => {\r\n   return (\r\n      <div className='pa2'>\r\n         <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots' \r\n            onChange={searchChange} \r\n         />\r\n       </div>  \r\n   );\r\n}\r\n\r\nexport default SearchBox;  ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n      <div style={{overflow: 'scroll', border: '1px solid black', height: '500px' }}>\r\n         {props.children}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info) {\r\n\tthis.setState({ hasError: true })\r\n}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>That is not good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         robots: [],\r\n         searchfield: ''\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(response => response.json())\r\n         .then(users => this.setState({ robots: users }));\r\n   }\r\n\r\n   onSearchChange = (event) => {\r\n      this.setState({ searchfield: event.target.value })\r\n      \r\n   }\r\n   render() {\r\n      const { robots, searchfield } = this.state;\r\n      const filteredRobots = robots.filter(robot => {\r\n         return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      })\r\n       return !robots.length ? \r\n         <h1>Loading</h1> :\r\n       (\r\n         <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n               <ErrorBoundry>\r\n               <CardList robots={filteredRobots} />\r\n               </ErrorBoundry>\r\n            </Scroll>   \r\n         </div>\r\n         );\r\n      }\r\n   }\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}